@use "sass:map";
@use 'sass:math';

@function rem($pixel) {
    @if math.is-unitless($pixel) {
        @return math.div($pixel, 16)+rem;
    }

    @else {
        @error 'Don\'t use units when using the rem() function; only numbers.';
    }
}


$breakpoints: (xs: (min: rem(414),
        max: rem(413.98)),
    sm: (min: rem(576),
        max: rem(575.98)),
    md: ( // min: rem(768),
        // max: rem(767.98)
        min: rem(992),
        max: rem(991.98)),
    lg: (min: rem(1200),
        max: rem(1199.98)),
    xl: (min: rem(1400),
        max: rem(1399.98)),
    xxl: ( //   min: rem(1920),
        //   max: rem(1919.98)
        min: rem(2560),
        max: rem(2559.98)),
    xxxl: (min: rem(2860),
        max: rem(2759.98)));

@mixin breakpoint($breakpoint, $direction: min) {

    //check if the supplied breakpoint exists in our breakpoits map
    @if map.has-key($breakpoints, $breakpoint) {
        $breakpoint-values: map.get($breakpoints, $breakpoint);
        $breakpoint-min: map.get($breakpoint-values, min);
        $breakpoint-max: map.get($breakpoint-values, max);

        //check if we are writing styles for larger or smaller screens
        @if $direction==min {
            @media (min-width: $breakpoint-min) {
                @content;
            }
        }

        @else {
            @media (max-width: $breakpoint-max) {
                @content;
            }
        }

        // use the custom value if the breakpoint is not part of the pre-defined list
    }

    @else {

        @if $direction==min {
            @media (min-width: $breakpoint) {
                @content;
            }
        }

        @else {
            @media (max-width: $breakpoint) {
                @content;
            }
        }
    }
}

@mixin basicList() {
    list-style: none;
    margin: 0;
    padding: 0;
}

@mixin button() {
    align-items: center;
    background: var(--button-bg);
    border-radius: var(--border-radius);
    border: none;
    color: var(--button-colour);
    cursor: pointer;
    display: inline-flex;
    min-height: rem(55);
    justify-content: center;
    font-size: rem(18);
    font-weight: var(--font-weight--bold);
    line-height: 1;
    padding: 0 rem(20);
    text-decoration: none;
    // transition: var(--hover-transition);

    &::after {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='13' fill='none'%3E%3Cpath stroke='%23FDF8EC' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M10.059 1.5 15 6.5m0 0-4.941 5M15 6.5H1'/%3E%3C/svg%3E");
        background-position: 0 0;
        background-size: cover;
        content: '';
        height: rem(11);
        margin-left: rem(10);
        width: rem(14);
    }

    @media not all and (hover: none) {
        &:hover {
            background: var(--button-bg--hover);
            color: var(--button-colour--hover);
        }
    }

    @include breakpoint(lg) {
        font-size: rem(18);
    }

}


@mixin pattern($opacity: 0.5) {
    isolation: isolate;
    position: relative;

    &::after {
        background: url('/pattern.png') 0 0 repeat;
        bottom: 0;
        content: '';
        left: 0;
        opacity: $opacity;
        position: absolute;
        right: 0;
        top: 0;
        z-index: -1;
    }

}
